1)   <pre class="main__code">
                            <code class="language-cpp">
                                    #include < iostream >
                                    #include < vector >
                                    
                                    using namespace std;
                                    
                                    class Edge {
                                    public:
                                        int source, destination;
                                    
                                        Edge(int source, int destination) {
                                            this->source = source;
                                            this->destination = destination;
                                        }
                                    };
                                    
                                    class DirectedGraph {
                                    public:
                                        vector < Edge > edges;
                                    
                                        void addEdge(int source, int destination) {
                                            Edge edge(source, destination);
                                            edges.push_back(edge);
                                        }
                                    
                                        void printGraph() {
                                            for (const Edge& edge : edges) {
                                                cout << edge.source << " -> " << edge.destination << endl;
                                            }
                                        }
                                    };
                                    
                                    int main() {
                                        DirectedGraph graph;
                                    
                                        // Dodawanie krawędzi
                                        graph.addEdge(0, 1);
                                        graph.addEdge(1, 2);
                                        graph.addEdge(2, 0);
                                        graph.addEdge(2, 1);
                                        graph.addEdge(3, 2);
                                    
                                        // Wyświetlanie grafu
                                        cout << "Graf skierowany:" << endl;
                                        graph.printGraph();
                                    
                                        return 0;
                                    }
                            </code>
                        </pre>


2)   <pre class="main__code">
                            <code>
                                    #include < iostream >
                                    #include < list >
                                    #include < unordered_map >
                                    
                                    using namespace std;
                                    
                                    class Graph {
                                    public:
                                        unordered_map< int, list< int > > adjacencyList;
                                    
                                        void addEdge(int source, int destination) {
                                            // Dodaj destination do listy sąsiadów source
                                            adjacencyList[source].push_back(destination);
                                        }
                                    
                                        void printGraph() {
                                            for (const auto& pair : adjacencyList) {
                                                int source = pair.first;
                                                const list< int >& neighbors = pair.second;
                                    
                                                cout << "Sąsiedzi wierzchołka " << source << ": ";
                                                for (int neighbor : neighbors) {
                                                    cout << neighbor << " ";
                                                }
                                                cout << endl;
                                            }
                                        }
                                    };
                                    
                                    int main() {
                                        Graph graph;
                                    
                                        // Dodawanie krawędzi
                                        graph.addEdge(0, 1);
                                        graph.addEdge(1, 2);
                                        graph.addEdge(2, 0);
                                        graph.addEdge(2, 1);
                                        graph.addEdge(3, 2);
                                    
                                        // Wyświetlanie listy sąsiedztwa
                                        cout << "Lista sąsiedztwa:" << endl;
                                        graph.printGraph();
                                    
                                        return 0;
                                    }
                            </code>
                        </pre>


3)   <pre class="main__code">
                            <code>
                                    #include < iostream >
                                    #include < list >
                                    #include < unordered_map >
                                    
                                    using namespace std;
                                    
                                    class Graph {
                                    public:
                                        unordered_map< int, list< int > > adjacencyList;
                                    
                                        void addEdge(int source, int destination) {
                                            // Dodaj destination do listy sąsiadów source
                                            adjacencyList[source].push_back(destination);
                                        }
                                    
                                        void printGraph() {
                                            for (const auto& pair : adjacencyList) {
                                                int source = pair.first;
                                                const list< int >& neighbors = pair.second;
                                    
                                                cout << "Sąsiedzi wierzchołka " << source << ": ";
                                                for (int neighbor : neighbors) {
                                                    cout << neighbor << " ";
                                                }
                                                cout << endl;
                                            }
                                        }
                                    };
                                    
                                    int main() {
                                        Graph graph;
                                    
                                        // Dodawanie krawędzi
                                        graph.addEdge(0, 1);
                                        graph.addEdge(1, 2);
                                        graph.addEdge(2, 0);
                                        graph.addEdge(2, 1);
                                        graph.addEdge(3, 2);
                                    
                                        // Wyświetlanie listy sąsiedztwa
                                        cout << "Lista sąsiedztwa:" << endl;
                                        graph.printGraph();
                                    
                                        return 0;
                                    }
                            </code>
                        </pre>